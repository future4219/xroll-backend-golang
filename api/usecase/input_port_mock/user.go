// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/input_port/user.go

// Package mock_input_port is a generated GoMock package.
package mock_input_port

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "gitlab.com/digeon-inc/japan-association-for-clinical-engineers/e-privado/api/domain/entity"
	input_port "gitlab.com/digeon-inc/japan-association-for-clinical-engineers/e-privado/api/usecase/input_port"
)

// MockIUserUseCase is a mock of IUserUseCase interface.
type MockIUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIUserUseCaseMockRecorder
}

// MockIUserUseCaseMockRecorder is the mock recorder for MockIUserUseCase.
type MockIUserUseCaseMockRecorder struct {
	mock *MockIUserUseCase
}

// NewMockIUserUseCase creates a new mock instance.
func NewMockIUserUseCase(ctrl *gomock.Controller) *MockIUserUseCase {
	mock := &MockIUserUseCase{ctrl: ctrl}
	mock.recorder = &MockIUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserUseCase) EXPECT() *MockIUserUseCaseMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockIUserUseCase) Authenticate(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockIUserUseCaseMockRecorder) Authenticate(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockIUserUseCase)(nil).Authenticate), token)
}

// AuthenticateForUpdateEmail mocks base method.
func (m *MockIUserUseCase) AuthenticateForUpdateEmail(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateForUpdateEmail", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateForUpdateEmail indicates an expected call of AuthenticateForUpdateEmail.
func (mr *MockIUserUseCaseMockRecorder) AuthenticateForUpdateEmail(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateForUpdateEmail", reflect.TypeOf((*MockIUserUseCase)(nil).AuthenticateForUpdateEmail), token)
}

// AuthenticateForUpdatePassword mocks base method.
func (m *MockIUserUseCase) AuthenticateForUpdatePassword(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateForUpdatePassword", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateForUpdatePassword indicates an expected call of AuthenticateForUpdatePassword.
func (mr *MockIUserUseCaseMockRecorder) AuthenticateForUpdatePassword(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateForUpdatePassword", reflect.TypeOf((*MockIUserUseCase)(nil).AuthenticateForUpdatePassword), token)
}

// Create mocks base method.
func (m *MockIUserUseCase) Create(arg0 input_port.UserCreate) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIUserUseCaseMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserUseCase)(nil).Create), arg0)
}

// CreateUserWithDetail mocks base method.
func (m *MockIUserUseCase) CreateUserWithDetail(user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserWithDetail", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserWithDetail indicates an expected call of CreateUserWithDetail.
func (mr *MockIUserUseCaseMockRecorder) CreateUserWithDetail(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithDetail", reflect.TypeOf((*MockIUserUseCase)(nil).CreateUserWithDetail), user)
}

// Delete mocks base method.
func (m *MockIUserUseCase) Delete(myself entity.User, userID string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", myself, userID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIUserUseCaseMockRecorder) Delete(myself, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUserUseCase)(nil).Delete), myself, userID)
}

// FindByID mocks base method.
func (m *MockIUserUseCase) FindByID(myself entity.User, userID string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", myself, userID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockIUserUseCaseMockRecorder) FindByID(myself, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIUserUseCase)(nil).FindByID), myself, userID)
}

// FindByIDByAdmin mocks base method.
func (m *MockIUserUseCase) FindByIDByAdmin(myself entity.User, userID string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDByAdmin", myself, userID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDByAdmin indicates an expected call of FindByIDByAdmin.
func (mr *MockIUserUseCaseMockRecorder) FindByIDByAdmin(myself, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDByAdmin", reflect.TypeOf((*MockIUserUseCase)(nil).FindByIDByAdmin), myself, userID)
}

// Login mocks base method.
func (m *MockIUserUseCase) Login(email, password string) (entity.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", email, password)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockIUserUseCaseMockRecorder) Login(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIUserUseCase)(nil).Login), email, password)
}

// Search mocks base method.
func (m *MockIUserUseCase) Search(myself entity.User, query, userType string, skip, limit int) ([]entity.User, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", myself, query, userType, skip, limit)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Search indicates an expected call of Search.
func (mr *MockIUserUseCaseMockRecorder) Search(myself, query, userType, skip, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockIUserUseCase)(nil).Search), myself, query, userType, skip, limit)
}

// SendResetPasswordMail mocks base method.
func (m *MockIUserUseCase) SendResetPasswordMail(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResetPasswordMail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResetPasswordMail indicates an expected call of SendResetPasswordMail.
func (mr *MockIUserUseCaseMockRecorder) SendResetPasswordMail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResetPasswordMail", reflect.TypeOf((*MockIUserUseCase)(nil).SendResetPasswordMail), email)
}

// Update mocks base method.
func (m *MockIUserUseCase) Update(myself entity.User, update input_port.UserUpdate) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", myself, update)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIUserUseCaseMockRecorder) Update(myself, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUserUseCase)(nil).Update), myself, update)
}

// UpdateEmail mocks base method.
func (m *MockIUserUseCase) UpdateEmail(userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmail", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmail indicates an expected call of UpdateEmail.
func (mr *MockIUserUseCaseMockRecorder) UpdateEmail(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmail", reflect.TypeOf((*MockIUserUseCase)(nil).UpdateEmail), userID)
}

// UpdateEmailRequest mocks base method.
func (m *MockIUserUseCase) UpdateEmailRequest(userID, newEmail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmailRequest", userID, newEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmailRequest indicates an expected call of UpdateEmailRequest.
func (mr *MockIUserUseCaseMockRecorder) UpdateEmailRequest(userID, newEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailRequest", reflect.TypeOf((*MockIUserUseCase)(nil).UpdateEmailRequest), userID, newEmail)
}

// UpdatePassword mocks base method.
func (m *MockIUserUseCase) UpdatePassword(arg0 input_port.UserUpdatePassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockIUserUseCaseMockRecorder) UpdatePassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockIUserUseCase)(nil).UpdatePassword), arg0)
}
