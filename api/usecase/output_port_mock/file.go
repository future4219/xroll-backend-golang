// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/output_port/file.go

// Package mock_output_port is a generated GoMock package.
package mock_output_port

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entconst "gitlab.com/digeon-inc/japan-association-for-clinical-engineers/e-privado/api/domain/entconst"
	entity "gitlab.com/digeon-inc/japan-association-for-clinical-engineers/e-privado/api/domain/entity"
)

// MockFileDriver is a mock of FileDriver interface.
type MockFileDriver struct {
	ctrl     *gomock.Controller
	recorder *MockFileDriverMockRecorder
}

// MockFileDriverMockRecorder is the mock recorder for MockFileDriver.
type MockFileDriverMockRecorder struct {
	mock *MockFileDriver
}

// NewMockFileDriver creates a new mock instance.
func NewMockFileDriver(ctrl *gomock.Controller) *MockFileDriver {
	mock := &MockFileDriver{ctrl: ctrl}
	mock.recorder = &MockFileDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileDriver) EXPECT() *MockFileDriverMockRecorder {
	return m.recorder
}

// CopyFile mocks base method.
func (m *MockFileDriver) CopyFile(srcID, dstID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFile", srcID, dstID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFile indicates an expected call of CopyFile.
func (mr *MockFileDriverMockRecorder) CopyFile(srcID, dstID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFile", reflect.TypeOf((*MockFileDriver)(nil).CopyFile), srcID, dstID)
}

// CreatePreSignedURLForGet mocks base method.
func (m *MockFileDriver) CreatePreSignedURLForGet(filepath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePreSignedURLForGet", filepath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePreSignedURLForGet indicates an expected call of CreatePreSignedURLForGet.
func (mr *MockFileDriverMockRecorder) CreatePreSignedURLForGet(filepath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePreSignedURLForGet", reflect.TypeOf((*MockFileDriver)(nil).CreatePreSignedURLForGet), filepath)
}

// CreatePreSignedURLForPut mocks base method.
func (m *MockFileDriver) CreatePreSignedURLForPut(filepath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePreSignedURLForPut", filepath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePreSignedURLForPut indicates an expected call of CreatePreSignedURLForPut.
func (mr *MockFileDriverMockRecorder) CreatePreSignedURLForPut(filepath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePreSignedURLForPut", reflect.TypeOf((*MockFileDriver)(nil).CreatePreSignedURLForPut), filepath)
}

// CreateVideoPreSignedURLForGet mocks base method.
func (m *MockFileDriver) CreateVideoPreSignedURLForGet(key, fileName string) (string, entconst.FileStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVideoPreSignedURLForGet", key, fileName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(entconst.FileStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateVideoPreSignedURLForGet indicates an expected call of CreateVideoPreSignedURLForGet.
func (mr *MockFileDriverMockRecorder) CreateVideoPreSignedURLForGet(key, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVideoPreSignedURLForGet", reflect.TypeOf((*MockFileDriver)(nil).CreateVideoPreSignedURLForGet), key, fileName)
}

// DeleteDirectoryWithPath mocks base method.
func (m *MockFileDriver) DeleteDirectoryWithPath(filepath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDirectoryWithPath", filepath)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDirectoryWithPath indicates an expected call of DeleteDirectoryWithPath.
func (mr *MockFileDriverMockRecorder) DeleteDirectoryWithPath(filepath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectoryWithPath", reflect.TypeOf((*MockFileDriver)(nil).DeleteDirectoryWithPath), filepath)
}

// DeleteFileWithPath mocks base method.
func (m *MockFileDriver) DeleteFileWithPath(filepath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileWithPath", filepath)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileWithPath indicates an expected call of DeleteFileWithPath.
func (mr *MockFileDriverMockRecorder) DeleteFileWithPath(filepath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileWithPath", reflect.TypeOf((*MockFileDriver)(nil).DeleteFileWithPath), filepath)
}

// DeleteVideoByKey mocks base method.
func (m *MockFileDriver) DeleteVideoByKey(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVideoByKey", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVideoByKey indicates an expected call of DeleteVideoByKey.
func (mr *MockFileDriverMockRecorder) DeleteVideoByKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVideoByKey", reflect.TypeOf((*MockFileDriver)(nil).DeleteVideoByKey), key)
}

// UploadCsv mocks base method.
func (m *MockFileDriver) UploadCsv(url string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadCsv", url, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadCsv indicates an expected call of UploadCsv.
func (mr *MockFileDriverMockRecorder) UploadCsv(url, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadCsv", reflect.TypeOf((*MockFileDriver)(nil).UploadCsv), url, data)
}

// MockFileRepository is a mock of FileRepository interface.
type MockFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepositoryMockRecorder
}

// MockFileRepositoryMockRecorder is the mock recorder for MockFileRepository.
type MockFileRepositoryMockRecorder struct {
	mock *MockFileRepository
}

// NewMockFileRepository creates a new mock instance.
func NewMockFileRepository(ctrl *gomock.Controller) *MockFileRepository {
	mock := &MockFileRepository{ctrl: ctrl}
	mock.recorder = &MockFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepository) EXPECT() *MockFileRepositoryMockRecorder {
	return m.recorder
}

// DeleteBulk mocks base method.
func (m *MockFileRepository) DeleteBulk(tx interface{}, fileIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBulk", tx, fileIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBulk indicates an expected call of DeleteBulk.
func (mr *MockFileRepositoryMockRecorder) DeleteBulk(tx, fileIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBulk", reflect.TypeOf((*MockFileRepository)(nil).DeleteBulk), tx, fileIDs)
}

// FindByID mocks base method.
func (m *MockFileRepository) FindByID(fileID string) (entity.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", fileID)
	ret0, _ := ret[0].(entity.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockFileRepositoryMockRecorder) FindByID(fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockFileRepository)(nil).FindByID), fileID)
}
